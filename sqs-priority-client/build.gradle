plugins {
    id "java-library"
    id "maven-publish"
    id "com.avast.gradle.docker-compose"    version "0.14.2"
    id "com.nike.pdm.localstack"            version "0.1.0"
    id "com.github.johnrengelman.shadow"    version "6.1.0"
    id "org.asciidoctor.jvm.convert"        version "3.1.0"
    id "org.unbroken-dome.test-sets"        version "3.0.1"
    id "com.adarshr.test-logger"            version "2.1.0"
}

// Project Configuration
project.description = "Amazon SQS client wrapper that supports reading from multiple queues with configured message priorities"
project.ext.name    = "sqs-priority-client"
project.ext.scm     = "scm:git@github.com/gregwhitaker/sqs-priority-client.git"
project.ext.url     = "https://github.com/gregwhitaker/sqs-priority-client.git"

// Dependency Management
dependencies {
    implementation "com.google.guava:guava:30.1.1-jre"
    implementation "org.slf4j:slf4j-api:1.7.30"

    api "io.projectreactor:reactor-core:3.4.4"
    api "software.amazon.awssdk:sqs:2.16.24"

    runtime "org.slf4j:slf4j-simple:1.7.30"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testImplementation "org.mockito:mockito-core:2.21.0"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
}

// Build
java {
    withJavadocJar()
    withSourcesJar()
}

// Testing
testSets {
    integTest
}

test {
    useJUnitPlatform()
}

// Publishing
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/gregwhitaker/sqs-priority-client")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

// LocalStack
localstack {
    workingDir = file("${projectDir}/localstack")
}

dockerCompose {
    useComposeFiles = [ "${projectDir}/localstack/localstack-docker-compose.yml" ]
}

task setupLocalQueues(type: com.nike.pdm.localstack.aws.sqs.CreateSqsQueuesTask) {
    queueNames = [
            'high-priority-queue',
            'medium-priority-queue',
            'low-priority-queue',
    ]
}

task publishMessages {
    dependsOn('publishHighPriorityMessages', 'publishMediumPriorityMessages', 'publishLowPriorityMessages')
    description("Publishes messages to each of the priority queues.")
}

task publishHighPriorityMessages(type: com.nike.pdm.localstack.aws.sqs.PublishSqsTask) {
    queueNames = [ 'high-priority-queue']
    message = file("${projectDir}/localstack/messages/1-high-priority-messages")
    description("Publishes messages to the high priority queue.")
}

task publishMediumPriorityMessages(type: com.nike.pdm.localstack.aws.sqs.PublishSqsTask) {
    queueNames = [ 'medium-priority-queue']
    message = file("${projectDir}/localstack/messages/2-medium-priority-messages")
    description("Publishes messages to the medium priority queue.")
}

task publishLowPriorityMessages(type: com.nike.pdm.localstack.aws.sqs.PublishSqsTask) {
    queueNames = [ 'low-priority-queue']
    message = file("${projectDir}/localstack/messages/3-low-priority-messages")
    description("Publishes messages to the low priority queue.")
}

// Documentation
asciidoctor {
    baseDirFollowsSourceDir()
    version = project.version
    sourceDir = file("src/docs/asciidoc")
    attributes = [
            "toc": "left",
            "source-highlighter": "prettify",
            "icons": "font",
            "numbered": "",
            "idprefix": "",
            "docinfo1": "true",
            "sectanchors": "true",
            "samplesCodeDir": file("src/docs/samples")
    ]
}

task buildDocSite(type: Copy) {
    group('Documentation')
    description('Builds the documentation website for the library.')
    dependsOn('build', 'cleanDocSite', 'asciidoctor')
    destinationDir = file("../docs")

    from ("${buildDir}/docs/asciidoc") {
        include "index.html"
    }

    from ("${buildDir}/docs/javadoc") {
        into "javadoc"
    }

    doLast {
        new File(rootDir, "docs/.nojekyll").createNewFile()
    }
}

task cleanDocSite(type: Delete) {
    group('Documentation')
    description('Deletes the documentation website for the library.')
    delete "docsite"
}